<?php

/**
 * Enqueue Script
 *
 * This class is responsible for registering and enqueuing scripts.
 *
 * This class internally uses asset information to set script dependencies,
 * and version generated by @wordpress/dependency-extraction-webpack-plugin package.
 * It also handles script translation registration.
 *
 * @package StellarPay\Core
 * @since 1.0.0
 */

declare(strict_types=1);

namespace StellarPay\Core;

use StellarPay\Core\Constants as CoreConstants;
use StellarPay\Core\Exceptions\BindingResolutionException;
use StellarPay\Core\Exceptions\Primitives\InvalidArgumentException;

use function wp_set_script_translations;

/**
 * Class EnqueueScript
 *
 * @since 1.8.0 Add new method "addInlineScript".
 * @since 1.6.0 Add logic to js filter dependencies.
 * @since 1.0.0
 */
class EnqueueScript
{
    /**
     * @since 1.6.0
     * @var callable|null
     */
    private $dependenciesFilter = null;

    /**
     * @since 1.0.0
     *
     * This prevents fatal error on the production environment.
     * Exception will be thrown if debug mode is enabled.
     */
    private bool $error;

    /**
     * @since 1.0.0
     *
     * @var string Script id.
     */
    private string $scriptId;

    /**
     * @since 1.0.0
     *
     * @var string Relative script path.
     */
    private string $relativeScriptPath;

    /**
     * @since 1.0.0
     *
     * @var string
     */
    private string $absoluteScriptPath;

    /**
     * @since 1.0.0
     *
     * @var array Array of script dependencies.
     */
    private array $scriptDependencies = [];

    /**
     * @since 1.0.0
     *
     * @var bool A flag to tell whether loading a script in footer.
     */
    private bool $loadScriptInFooter = false;

    /**
     * @since 1.0.0
     *
     * @var bool A flag to tell whether to register translations for a script.
     */
    private bool $registerTranslations = false;

    /**
     * @since 1.0.0
     *
     * @var string Localize script param name.
     */
    private string $localizeScriptParamName;

    /**
     * @since 1.0.0
     *
     * @var mixed Localize script data.
     */
    private $localizeScriptParamData;

    /**
     * @since 1.0.0
     *
     * @var string|null Plugin directory path.
     */
    private ?string $pluginDirPath;

    /**
     * @since 1.0.0
     *
     * @var string|null Plugin directory url.
     */
    private ?string $pluginDirUrl;

    /**
     * @since 1.0.0
     *
     * @var string  Text domain.
     */
    private string $textDomain;

    /**
     * @since 1.0.0
     *
     * @var string Original script id.
     */
    private string $originalScriptId;

    /**
     * @since 1.0.0
     *
     * @var bool A flag to tell whether loading style.
     */
    private bool $loadStyle = false;

    /**
     * @since 1.0.0
     *
     * @var array Array of style dependencies.
     */
    private array $styleDependencies;

    /**
     * Constructor.
     *
     * @since 1.0.0
     * @throws BindingResolutionException
     */
    public function __construct(string $scriptId, string $scriptPath)
    {
        $scriptPrefix = Constants::PLUGIN_SLUG;
        $this->pluginDirPath = Constants::$PLUGIN_DIR;
        $this->pluginDirUrl = Constants::$PLUGIN_URL;
        $this->textDomain = 'stellarpay';
        $this->originalScriptId = $scriptId;
        $this->scriptId = "$scriptPrefix-$scriptId-js";
        $this->relativeScriptPath = $scriptPath;
        $this->absoluteScriptPath = $this->pluginDirPath . $this->relativeScriptPath;
        $this->error = empty($scriptId) || !file_exists($this->absoluteScriptPath);

        if (
            $this->error
            && container(DebugMode::class)->isEnabled()
        ) {
            throw new Exceptions\Primitives\InvalidArgumentException("Invalid script provided: ($scriptId): $scriptPath"); // phpcs:ignore
        }
    }

    /**
     * This function sets a flag to load a script in footer.
     *
     * @since 1.0.0
     *
     * @return $this
     */
    public function loadInFooter(): EnqueueScript
    {
        $this->loadScriptInFooter = true;

        return $this;
    }

    /**
     * This function sets a flag to load style with a script.
     *
     * The WordPress dependency extraction JavaScript package generates a style file which we can load with script.
     *
     * @since 1.0.0
     *
     * @return $this
     */
    public function loadStyle(array $dependencies = []): EnqueueScript
    {
        $this->loadStyle = true;
        $this->styleDependencies = $dependencies;

        return $this;
    }

    /**
     * This function sets additional script dependencies.
     *
     * These additional dependencies add to a list of dependencies
     * generate by WordPress dependency extraction JavaScript package.
     *
     * @since 1.0.0
     *
     * @param array $scriptDependencies
     *
     * @return $this
     */
    public function dependencies(array $scriptDependencies): EnqueueScript
    {
        $this->scriptDependencies = $scriptDependencies;

        return $this;
    }

    /**
     * @since 1.6.0
     */
    public function dependenciesFilter(callable $callback): self
    {
        $this->dependenciesFilter = $callback;
        return $this;
    }

    /**
     * @since 1.0.0
     */
    public function register(): EnqueueScript
    {
        // Skip script registration upon error.
        if ($this->error) {
            return $this;
        }

        $scriptUrl = $this->pluginDirUrl . $this->relativeScriptPath;
        $scriptAsset = $this->getAssetFileData();

        wp_register_script(
            $this->scriptId,
            $scriptUrl,
            $scriptAsset['dependencies'],
            $scriptAsset['version'],
            $this->loadScriptInFooter
        );

        if ($this->registerTranslations) {
            wp_set_script_translations(
                $this->scriptId,
                $this->textDomain,
                $this->pluginDirPath . 'languages'
            );
        }

        if ($this->localizeScriptParamData) {
            wp_localize_script(
                $this->scriptId,
                $this->localizeScriptParamName,
                $this->localizeScriptParamData
            );
        }

        return $this;
    }

    /**
     * This function sets a flag to enable registration of translations for a script.
     *
     * @since 1.0.0
     * @return $this
     */
    public function registerTranslations(): EnqueueScript
    {
        $this->registerTranslations = true;

        return $this;
    }

    /**
     * This function sets localize data for a script which output when script enqueue.
     *
     * @since 1.0.0
     */
    public function registerLocalizeData(string $jsVariableName, array $data): EnqueueScript
    {
        $this->localizeScriptParamName = $jsVariableName;
        $this->localizeScriptParamData = $data;

        return $this;
    }

    /**
     * This function enqueues a script.
     *
     * @since 1.0.0
     */
    public function enqueue(): EnqueueScript
    {
        // Skip script enqueue upon error.
        if ($this->error) {
            return $this;
        }

        if (!wp_script_is($this->scriptId, 'registered')) {
            $this->register();
        }

        wp_enqueue_script($this->scriptId);
        $this->enqueueStyle();

        return $this;
    }

    /**
     * This function enqueues a style if "loadStyle" flag is set to true.
     *
     * @since 1.7.0 Change visibility to public
     * @since 1.0.0
     */
    public function enqueueStyle(): void
    {
        if (!$this->loadStyle) {
            return;
        }

        $relativePath = str_replace('.js', '.css', $this->relativeScriptPath);

        wp_enqueue_style(
            "$this->originalScriptId-css",
            $this->pluginDirUrl . $relativePath,
            $this->styleDependencies,
            $this->getVersion()
        );
    }

    /**
     * This function returns script id.
     *
     * @since 1.0.0
     */
    public function getScriptId(): string
    {
        return $this->scriptId;
    }

    /**
     * This function returns script data.
     *
     * The Script data generated by WordPress dependency extraction javascript package.
     *
     * @since 1.0.0
     */
    public function getAssetFileData(): array
    {
        $scriptAssetPath = trailingslashit(dirname($this->absoluteScriptPath))
            . basename($this->absoluteScriptPath, '.js')
            . '.asset.php';

        if (!file_exists($scriptAssetPath)) {
            // phpcs:ignore
            throw new InvalidArgumentException("Asset file not found for script: $this->absoluteScriptPath");
        }

        $scriptAsset = require($scriptAssetPath);

        if ($this->scriptDependencies) {
            $scriptAsset['dependencies'] = array_merge($this->scriptDependencies, $scriptAsset['dependencies']);
        }

        // Filter dependencies if a filter is set.
        if ($scriptAsset['dependencies'] && is_callable($this->dependenciesFilter)) {
            $scriptAsset['dependencies'] = call_user_func($this->dependenciesFilter, $scriptAsset['dependencies']);
        }

        return $scriptAsset;
    }

    /**
     * This function returns script version.
     *
     * The script version generated by WordPress dependency extraction javascript package.
     *
     * @since 1.0.0
     *
     * @return string
     */
    public function getVersion(): string
    {
        return $this->getAssetFileData()['version'];
    }

    /**
     * This function adds an inline script to a script.
     *
     * @since 1.8.0
     */
    public static function addInlineScript(string $scriptId, string $script, bool $inFooter = true): void
    {
        wp_register_script($scriptId, false, [], CoreConstants::VERSION, ['in_footer' => $inFooter]);
        wp_enqueue_script($scriptId);

        wp_add_inline_script($scriptId, $script);
    }
}
